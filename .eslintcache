[{"D:\\work\\react\\basic-merge-table\\src\\index.js":"1","D:\\work\\react\\basic-merge-table\\src\\App.js":"2","D:\\work\\react\\basic-merge-table\\src\\reportWebVitals.js":"3","D:\\work\\react\\basic-merge-table\\src\\component\\BasicMergeTable.js":"4","D:\\work\\react\\basic-merge-table\\src\\component\\CellComp.js":"5"},{"size":500,"mtime":1611847193934,"results":"6","hashOfConfig":"7"},{"size":4376,"mtime":1612093521160,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611847193934,"results":"9","hashOfConfig":"7"},{"size":13835,"mtime":1612093909243,"results":"10","hashOfConfig":"7"},{"size":5891,"mtime":1611939473122,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"2zhr6l",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"D:\\work\\react\\basic-merge-table\\src\\index.js",[],["24","25"],"D:\\work\\react\\basic-merge-table\\src\\App.js",["26","27","28"],"D:\\work\\react\\basic-merge-table\\src\\reportWebVitals.js",[],"D:\\work\\react\\basic-merge-table\\src\\component\\BasicMergeTable.js",["29","30","31","32","33","34","35","36","37"],"D:\\work\\react\\basic-merge-table\\src\\component\\CellComp.js",["38","39"],"import React from \"react\";\r\nimport \"./BasicTable.scss\";\r\n\r\nexport class Sg3TxtField extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.valueArr = [\"0\", \"0\"];\r\n        this.state = {\r\n            row: props.row,\r\n            colIdx: props.colIdx,\r\n            cellType: props.cellType,\r\n            value: props.value,\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // value가 다를경우만 render!\r\n        if(nextState.value === this.state.value) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onKeyDown = (e) => {\r\n        console.log(\"onKeyDown(1)\");\r\n        if (e.key >= 0 && e.key <= 9) {\r\n            // number\r\n            let tempHighVal = this.valueArr[1];\r\n            let lowVal = e.key;\r\n            this.valueArr = [tempHighVal, lowVal];\r\n    \r\n            const {row, colIdx} = this.state;\r\n            let hexVal = this.valueArr[0] + this.valueArr[1];\r\n            let decVal = parseInt(hexVal, 16); \r\n            \r\n            console.log('sg3 onKeyDown:', decVal);\r\n            this.setState({\r\n                value: decVal,\r\n            })\r\n\r\n            if(typeof this.props.updateTableData!=\"undefined\") {\r\n                this.props.updateTableData(row, colIdx, decVal);\r\n            }\r\n        }\r\n    \r\n        if (e.key === \"w\" || e.key === \"W\") {\r\n            // up\r\n            if (typeof this.props.onMoveRow != \"undefined\") {\r\n                this.props.onMoveRow(-1, this.props.colKey);\r\n            }\r\n        } else if (e.key === \"s\" || e.key === \"S\") {\r\n        // down\r\n            if (typeof this.props.onMoveRow != \"undefined\") {\r\n                this.props.onMoveRow(1, this.props.colKey);\r\n            }\r\n        } else if (e.key === \"a\") {\r\n          // left\r\n            if (typeof this.props.onMoveCol != \"undefined\") {\r\n                this.props.onMoveCol(-1, this.props.colKey);\r\n             }\r\n        } else if (e.key === \"d\") {\r\n          // right\r\n            if (typeof this.props.onMoveCol != \"undefined\") {\r\n                this.props.onMoveCol(1, this.props.colKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log('sg3 render', this.state.value);\r\n        let valueHex = \"00\";\r\n        \r\n        valueHex = this.state.value.toString(16).padStart(2, \"0\");\r\n        \r\n        let firCh = valueHex.substring(0, 1);\r\n        let secCh = valueHex.substring(1, 2);\r\n        let firBg = \"\";\r\n        let secBg = \"\";\r\n\r\n        if (firCh === \"1\" || firCh === \"5\")       firBg = \"green 50%\";\r\n        else if (firCh === \"2\" || firCh === \"3\")  firBg = \"yellow 50%\";\r\n        else if (firCh === \"8\")                   firBg = \"gray 50%\";\r\n        else if (firCh === \"0\")                   firBg = \"white 50%\";\r\n        \r\n\r\n        if (secCh === \"1\" || secCh === \"5\")       secBg = \"green 50%\";\r\n        else if (secCh === \"2\" || secCh === \"3\")  secBg = \"yellow 50%\";\r\n        else if (secCh === \"8\")                   secBg = \"gray 50%\";\r\n        else if (secCh === \"0\")                   secBg = \"white 50%\";\r\n    \r\n        return(\r\n            <input\r\n                ref={this.props.refVal}\r\n                type=\"text\"\r\n                className=\"tTxt2\"\r\n                style={{ background: `linear-gradient(90deg, ${firBg}, ${secBg})` }}\r\n                readOnly\r\n                value={valueHex}\r\n                onKeyDown={this.onKeyDown}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport class ChkBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            checked: props.checked,\r\n            row: props.row,\r\n            colIdx: props.colIdx,\r\n            cellType: props.cellType,\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // value가 다를경우만 render!\r\n        if(nextState.checked === this.state.checked) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            checked: e.target.checked,\r\n        })\r\n\r\n        const {row, colIdx} = this.state;\r\n        if(typeof this.props.updateTableData!=\"undefined\") {\r\n            this.props.updateTableData(row, colIdx, e.target.checked);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input type=\"checkbox\" checked={this.state.checked} onChange={this.onChange} />\r\n        )        \r\n    }\r\n}\r\n\r\nclass TextField extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            row: props.row,\r\n            colIdx: props.colIdx,\r\n            value: props.value,\r\n            cellType: props.cellType,\r\n        }\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // value가 다를경우만 render!\r\n        if(nextState.value === this.state.value) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //props이 바뀌면 state update        \r\n\r\n        if(prevProps.value != this.props.value) {\r\n             this.setState({\r\n                 value: this.props.value,\r\n             })\r\n         } \r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            value: e.target.value,\r\n        })\r\n\r\n        const {row, colIdx, value} = this.state;\r\n        // update props data (row, col)\r\n        if(typeof this.props.updateTableData!=\"undefined\") {\r\n            //console.log(\"field : \", row, colIdx, value);\r\n            this.props.updateTableData(row, colIdx, e.target.value);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(this.state.row === 0 && this.state.colIdx==='state1') {\r\n            console.log(\"state : \", this.state.value);\r\n        }\r\n        return(\r\n            <input type=\"text\" className=\"tTxt2\" value={this.state.value} onChange={this.onChange} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default TextField;",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":5,"column":10,"nodeType":"46","messageId":"47","endLine":5,"endColumn":19},{"ruleId":"48","severity":1,"message":"49","line":6,"column":12,"nodeType":"50","messageId":"51","endLine":6,"endColumn":13},{"ruleId":"52","severity":1,"message":"53","line":45,"column":3,"nodeType":"54","messageId":"55","endLine":47,"endColumn":4},{"ruleId":"44","severity":1,"message":"56","line":1,"column":17,"nodeType":"46","messageId":"47","endLine":1,"endColumn":26},{"ruleId":"57","severity":1,"message":"58","line":24,"column":39,"nodeType":"59","messageId":"60","endLine":24,"endColumn":41},{"ruleId":"57","severity":1,"message":"58","line":26,"column":49,"nodeType":"59","messageId":"60","endLine":26,"endColumn":51},{"ruleId":"61","severity":1,"message":"62","line":36,"column":41,"nodeType":"63","messageId":"64","endLine":36,"endColumn":43},{"ruleId":"57","severity":1,"message":"58","line":38,"column":43,"nodeType":"59","messageId":"60","endLine":38,"endColumn":45},{"ruleId":"57","severity":1,"message":"58","line":40,"column":53,"nodeType":"59","messageId":"60","endLine":40,"endColumn":55},{"ruleId":"44","severity":1,"message":"65","line":83,"column":11,"nodeType":"46","messageId":"47","endLine":83,"endColumn":14},{"ruleId":"57","severity":1,"message":"66","line":237,"column":45,"nodeType":"59","messageId":"67","endLine":237,"endColumn":47},{"ruleId":"57","severity":1,"message":"66","line":300,"column":62,"nodeType":"59","messageId":"67","endLine":300,"endColumn":64},{"ruleId":"61","severity":1,"message":"62","line":164,"column":28,"nodeType":"63","messageId":"64","endLine":164,"endColumn":30},{"ruleId":"44","severity":1,"message":"68","line":176,"column":29,"nodeType":"46","messageId":"47","endLine":176,"endColumn":34},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'createRow' is defined but never used.","Identifier","unusedVar","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'useEffect' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'key' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'value' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]